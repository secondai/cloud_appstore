{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "269e93ea-02b6-4182-98a2-c1bb066c7ac1",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      console.log('Listing Actions:', JSON.stringify(INPUT,null,2));\n      \n      let INPUT_data = INPUT.data || {};\n      \n      let finalReturnNodes = await universe.searchMemory({\n        lean: true,\n        filter: {\n          dataFilter: {\n            nodes : {\n              $elemMatch: {\n                type: {\n                  $like: 'action_pointer:'\n                }\n              }\n            }\n          },\n          // function for returning data from the Node, after filtering a bit \n          // - includes both the Node, and Nodes with nodeId (pointers) \n          filterNodes: tmpNodes=>{\n            // this runs isolated, outside of the above context? (not sure) \n            return new Promise((resolve, reject)=>{\n              tmpNodes = tmpNodes.filter(tmpNode=>{\n                // see if has a ChildNode matching a type \n                \n                if(!universe.sameAppPlatform(SELF, tmpNode)){\n                  // console.log('FOUND IT UNDER SAME APP!!!!!', tmpNode._id);\n                  return false;\n                }\n                \n                return true;\n              });\n              resolve(tmpNodes);\n            });\n          },\n        }\n      });\n      \n      let returnNode;\n      \n      // show lean/trimmed by default \n      // - can also return cJSON (works), or a path (TODO)\n      \n      switch(INPUT_data.returnType){\n        case 'cjson':\n          // specifically requested *all* data \n          console.log('returning cJSON (not default)');\n          returnNode = {\n            type: 'list_of_nodes_as_cjson:0.0.1:local:3289f2',\n            data: universe.cJSON.stringify(finalReturnNodes)\n          }\n          break;\n          \n        default:\n          // lean/trim w/ default parents/children \n          try {\n            console.log('Returning lean (default, for now?)');\n            let tmpFinalReturnNodes = universe.trimSearchResults(finalReturnNodes);\n            finalReturnNodes = tmpFinalReturnNodes;\n            // console.log('trimmed search results ok');\n            \n            returnNode = {\n              type: 'list_of_nodes:0.0.1:local:3289f2',\n              data: finalReturnNodes\n            }\n            break;\n            \n          }catch(err){\n            console.error('Failed trimSearchResults! this is bad, cuz we cant stringify the result now (dont know what to return)..', err);\n            return;\n          }\n          \n          break;\n          \n      }\n      \n      return resolve(returnNode);\n        \n    }catch(err){\n      console.error('list_actions error:', err);\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}