{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "8a1aec75-e403-4e69-84ad-da2fa3652758",
    "code": "(()=>{\n  \n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      let nodes = [];\n      \n      // nodes = await universe.searchMemory({\n      //   filter: {\n      //     sqlFilter: {\n      //       _id: \"5ae2543ef7aafb0021ae3f6c\"\n      //     },\n      //   }\n      // });\n      \n      let ipfsResult = 'ipfsResult';\n      try {\n        console.log('==Testing if IPFS is ready==');\n        if(universe.IPFS.isReady()){\n        \n          console.log('==IPFS IS READY==');\n          \n          ipfsResult = 'ipfs is ready';\n          \n          // // Test pinning\n          // let file1 = new Buffer('testing random ' + universe.uuidv4(),'utf8');\n          // let file2 = new Buffer('testing random ' + universe.uuidv4(),'utf8');\n          // let pinResponse = await universe.IPFS.pin([file1,file2]);\n          // console.log('PINNED', pinResponse.data.hash);\n          // ipfsResult = ['pinned hash!',pinResponse.data.hash || pinResponse.data.hashes.join('|') ].join(':');\n          \n        }\n      }catch(err){\n        console.error('failed ipfs check:', err);\n      }\n      \n      // console.log('TEST NODES:', nodes.length);\n      \n      // let node = nodes[0];\n      \n      // delete node._id;\n      // node.name = \"testing_this_one_out2\";\n      // node.data.data.__TESTING = 'TEST2';\n      // await universe.newNode(node, true, true);\n      \n      // // rebuilding rebuildMemory\n      // console.log('======rebuilding memrory======');\n      // await universe.rebuildMemory();\n      // console.log('======DONE REBUILDING MEMRORY!======');\n        \n      let page = `\n        <!DOCTYPE html>\n        <html>\n          <head>\n            <meta charset=\"utf-8\">\n            <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n            <title>Testing</title>\n            \n            <link rel=\"icon\" href=\"/favicon.ico\" type=\"image/x-icon\">\n            \n            <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/bulma/0.7.1/css/bulma.min.css\" />\n            \n            <style>\n              .container {\n                max-width: 960px;\n              }\n            </style>\n            \n          </head>\n          <body>\n            <div class=\"container\">\n              <div class=\"content\">\n                <pre><code>${ipfsResult}</code></pre>\n              </div>\n            </div>\n            \n          </body>\n        </html>\n      `;\n\n      await universe.httpResponse('send', page); //page.replace(new RegExp(\"\\\\n\", 'g'), \"\\\\n\"));\n      \n      return resolve(true);\n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}