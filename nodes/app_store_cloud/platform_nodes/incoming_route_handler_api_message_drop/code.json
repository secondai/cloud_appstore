{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "8a1aec75-e403-4e69-84ad-da2fa3652758",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      console.log('--incoming_route_handler: Message Drop /drop --');\n      \n      // Expecting a consistent format for incoming messages (nodeFormat) \n      // - POST via request body \n      \n      let nodeMessage = INPUT.data.req.body;\n      \n      let wrappedNode = {\n        type: 'message_node:Qmtesting',\n        data: nodeMessage\n      }\n      \n      // simple response \n      let page = {\n        type: 'boolean',\n        data: true\n      };\n      await universe.httpResponse('send', page);\n      \n      // Runs a situation, \n      // - TODO: INPUT should be validated \n      // - TODO: allow subscription to further events, provide \"waiting_for_outcomes_on_channel\" type of approach? \n      let responseNode = await universe.loadAndRunCapability('Situation',{},{\n        type: 'standard_capability_action:0.0.1:local:298j291bs',\n        data: {\n          action: 'process',\n          options: {\n            passThruInputNodes: [wrappedNode] // always pass as an array of input nodes \n          }\n        }\n      });\n      \n      return resolve(true);\n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}