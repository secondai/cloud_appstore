{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "267e87c1-8497-4eeb-8af6-4e50e0098a6f",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // todo: make a request to a remote Second to be taught something \n      // - \"i want to learn about X\" \n      \n      let { \n        optionsNode, \n        dataNode \n      } = INPUT.data;\n      \n      // expecting \"options_xyz:dlfj\" type specifying options contributed \n      optionsNode = optionsNode || {\n        data: {}\n      };\n      \n      let {\n        skipWaitForResolution,\n        skipRebuild\n      } = optionsNode.data;\n      \n      \n      let saved;\n      try {\n        saved = await universe.updateNode(dataNode, skipWaitForResolution, skipRebuild);\n        saved = {\n          type: 'saved_node:...',\n          data: saved\n        }\n      }catch(err){\n        saved = {\n          type: 'error_failed_saving:...',\n          data: {\n            error: true,\n            err: err.toString()\n          }\n        }\n      }\n      \n      try {\n        JSON.stringify({saved, INPUT});\n      }catch(err){\n        console.error('Failed stringifying updateNode', err);\n      }\n      resolve({\n        saved, // should be cjson'd? \n        INPUT\n      });\n      \n      // decache only on code/react\n      // - TODO: everything related (routes, etc.) \n      try {\n        if(dataNode.data.code || dataNode.data.routes){\n          console.log('Code Node / Route, decaching searches');\n          universe.globalCache.SearchFilters = {};\n        }\n      }catch(err){\n      }\n      \n      // TODO: run \"updateCache\" identity \n      // - pass in what the should-update trigger was, and that compares against caches created (namespaced in Node format) \n      \n      universe.eventEmitter.emit(`node-modified-${dataNode._id}`, saved);\n      \n      // TODO: notify parents of modified children, etc. \n      // universe.eventEmitter.emit('node-children-modified',{}); // each parent, etc. \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}