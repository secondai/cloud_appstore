{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "author": "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcuXovU+RZy85KMqLakYSH1mdV\nWdpEUtgcXUyGyU5hVeTO7BkV/kxeC2upcxOwNnrBOdsvHI3nrrILgt90/hCSHKzx\nhOFLREorGoKtSEHxI7/SnzzlWtV3gT/IP5GVHIyvuJBx3hCti0dH55DZG8iMGZ2y\ncGpV73Dez3hHmeBh6wIDAQAB\n-----END PUBLIC KEY-----",
    "key": "5168e05a-daa7-404c-9a57-b7547cf73843",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      \n      // Create or update a local device that is managed remotely \n      // - device UUID, state \n      \n      // INPUT = {\n      // \"type\": \"standard_query_request:0.0.1:local:65723f2khfds\", // TODO: change, diff input expected \n      // \"data\": {\n      //   \"deviceUuid\": \"978fda5a-5834-426c-b933-6d3b040ba716\",\n      //   \"stateData\": {}\n      // },\n      // \"requestIndex\": \"1\"\n      // }\n      \n      // Requestor (Identity) needs to be the owner (otherwise we create the device_managed for them) \n      \n      console.log('Syncing Device State!:', JSON.stringify(INPUT, null,2));\n      \n      let requestCache = await universe.getRequestCache({});\n      \n      // Get the ExternalIdentityNode that manages the device \n      let AuthExternalIdentityNode = requestCache.keyvalue.IdentityNode; \n      if(requestCache.keyvalue.ActAsExternalIdentityNode){\n        // Find external_identity_node for this Second \n        // - \"acting as\" \n        AuthExternalIdentityNode = requestCache.keyvalue.ActAsExternalIdentityNode;\n      }\n      \n      if(!AuthExternalIdentityNode){\n        console.error('cannot update managed device from non-owner');\n        return reject({\n          type: 'error:..',\n          data: 'cannot update managed device from non-owner'\n        });\n      }\n      \n      console.log('Finding match for:', INPUT.data.deviceUuid);\n      \n      // Get all the nodes for the ExternalIdentityNode\n      let tmpDevices = await universe.searchMemory({\n        filter: {\n          dataFilter: {\n            type: {\n              $like: 'device_managed:',\n            },\n            'data.uuid' : INPUT.data.deviceUuid,\n            'parent._id' : AuthExternalIdentityNode._id\n          }\n        }\n      });\n      let deviceNode = tmpDevices.length ? tmpDevices[0]:null;\n      if(!deviceNode){\n        // create \n        console.log('Creating managed deviceNode');\n        deviceNode = await universe.newNode({\n          nodeId: AuthExternalIdentityNode._id,\n          name: universe.uuidv4(),\n          type: 'device_managed:Qmf289h2jksd',\n          data: {\n            uuid: INPUT.data.deviceUuid,\n            name: INPUT.data.name,\n            state: INPUT.data.stateData\n          }\n        });\n      } else {\n        // update \n        console.log('Updating managed deviceNode');\n        deviceNode.data.name = INPUT.data.name;\n        deviceNode.data.state = INPUT.data.stateData;\n        deviceNode = await universe.updateNode(deviceNode);\n      }\n      \n      console.log('Done syncing managed device state from remote');\n      \n      return resolve({\n        type: 'boolean:..',\n        data: true\n      });\n      \n      \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()",
    "note": "action: Identity Manage Data",
    "version": "2"
  }
}