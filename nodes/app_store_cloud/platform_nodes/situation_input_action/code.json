{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "author": "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcuXovU+RZy85KMqLakYSH1mdV\nWdpEUtgcXUyGyU5hVeTO7BkV/kxeC2upcxOwNnrBOdsvHI3nrrILgt90/hCSHKzx\nhOFLREorGoKtSEHxI7/SnzzlWtV3gT/IP5GVHIyvuJBx3hCti0dH55DZG8iMGZ2y\ncGpV73Dez3hHmeBh6wIDAQAB\n-----END PUBLIC KEY-----",
    "key": "5168e05a-daa7-404c-9a57-b7547cf73843",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      console.log('INPUT for situation_input:', universe.cJSON.stringify(INPUT,null,2));\n      \n      // Runs a situation, \n      // - response is a list of action responses from whatever was triggered \n      //   - TODO: allow subscription to further events, provide \"waiting_for_outcomes_on_channel\" type of approach? \n      let responseNode = await universe.loadAndRunCapability('Situation',{},{\n        type: 'standard_capability_action:0.0.1:local:298j291bs',\n        data: {\n          action: 'process',\n          options: {\n            passThruInputNodes: INPUT.data.data || [] // expecting an array of passThruInputNodes\n          }\n        }\n      });\n      \n      // returns \"list_of_responses\" and we need to turn into cJSON for the response \n      console.log('Situation Input Action Responding');\n      return resolve({\n        type: 'situation_response_as_cjson:Qm2839hf23',\n        data: universe.cJSON.stringify(responseNode)\n      });\n      \n      \n        \n    }catch(err){\n      console.error('Situation Input Action Failed', err);\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()",
    "note": "action: Identity Manage Data",
    "version": "2"
  }
}