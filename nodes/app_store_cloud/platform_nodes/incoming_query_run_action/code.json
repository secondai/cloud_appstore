{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "a821e596-0a28-4b2f-98f7-0211c636e475",
    "code": "(()=>{\n  \n  // This code handles an incoming \"run_action...\"\n  // - finds possible actions, passes action data in! \n  \n  // can use SELF node to check for CodeSchema of Pointer (or adject/sibling CodeSchema if I have a ParentNode/nodeId?)! \n  // - to find my own Child nodes! \n  \n  // find \"INPUT.data.matchActionType\" \n  \n  let INPUT_data = INPUT.data;\n  \n  return new Promise(async (resolve,reject)=>{\n    try {\n      let nodes = await universe.searchMemory({\n        filter: {\n          dataFilter: {\n            type: INPUT_data.matchActionType\n          },\n          // function for returning data from the Node, after filtering a bit \n          // - includes both the Node, and Nodes with nodeId (pointers) \n          filterNodes: tmpNodes=>{\n            // this runs isolated, outside of the above context? (not sure) \n            return new Promise((resolve, reject)=>{\n              tmpNodes = tmpNodes.filter(tmpNode=>{\n                // see if has a ChildNode matching a type \n                \n                // // must match action type \n                // if(tmpNode.type != INPUT.data.matchActionType){\n                //   return false;\n                // }\n                // if(tmpNode.type != 'search_internal_datasource:0.0.1:local:2h3ufih8s9h2f'){\n                //   return false;\n                // }\n                \n                // if(INPUT.data.matchActionType != 'search_internal_datasource:0.0.1:local:2h3ufih8s9h2f'){\n                //   return false;\n                // }\n                \n                if(tmpNode.type != INPUT_data.matchActionType){\n                  return false;\n                }\n                \n                // search_internal_datasource:0.0.1:local:2h3ufih8s9h2f\n                \n                // // must have code to run! \n                // let foundChildCode = (tmpNodes.nodes || []).find(tmpChildNode=>{\n                //   return tmpChildNode.type == 'code:0.0.1:local:32498h32f2';\n                // });\n                \n                // if(!foundChildCode){\n                //   return false;\n                // }\n                \n                if(!universe.sameAppPlatform(SELF, tmpNode)){\n                  // console.log('FOUND IT UNDER SAME APP!!!!!', tmpNode._id);\n                  return false;\n                }\n                \n                \n                // check action_pointer exists \n                // - TODO: better way of saying \"I am an action\" that doesnt include action_pointer metadata? \n                let isActionPointer = (tmpNode.nodes || []).find(node=>{\n                  return node.type.indexOf('action_pointer:') > -1;\n                });\n                if(!isActionPointer){\n                  // missing \"action_pointer\" metadata \n                  return false;\n                }\n                \n                return true;\n              });\n              resolve(tmpNodes);\n            });\n          },\n        }\n      });\n      \n      // return resolve({\n      //   test: 'ok',\n      //   typeMatch: INPUT.data.matchActionType,\n      //   nodes,\n      //   INPUT,\n      //   SELF\n      // });\n      \n      if(nodes && nodes.length){\n        // found Node to run for action! \n        // - assuming only 1 piece of Code possible/available \n        \n        let actionMainNode = nodes[0];\n        \n        let authNode = universe.lodash.find(actionMainNode.nodes,{type:'action_auth:Qm3289f32'});\n        if(!authNode){\n          authNode = {\n            type: 'action_auth:Qm3289f32',\n            data: {\n              defaultInternalRootRoleRequired: true\n            }\n          }\n        }\n      \n        let requestCache = await universe.getRequestCache();\n        \n        let InternalUserNode;\n        try {\n          InternalUserNode = requestCache.keyvalue.InternalUserNode;\n        }catch(err){\n          // console.error('Missing InternalUserNode', err);\n          InternalUserNode = null;\n        }\n        \n        if(authNode.data.defaultInternalRootRoleRequired && \n          (!InternalUserNode || InternalUserNode.data.roles.indexOf('root') === -1)){\n          console.error('Failed auth for action:', INPUT_data.matchActionType, InternalUserNode);\n          return resolve({\n            type: 'error_missing_authentication:Qmmissingauth',\n            data: false\n          });\n        } else {\n          // console.log('SUCCESS auth for action', INPUT_data.matchActionType);\n        }\n        \n        let codeNode = universe.lodash.find(actionMainNode.nodes,{type:'code:0.0.1:local:32498h32f2'});\n        \n        // run in vm, and pass in the inputSchema Node! \n        // - of the action! (expecting/requiring it to be a Node w/ code....how to verify that? logic vs data?) \n        let actionResult;\n        try {\n          actionResult = await universe.runNodeCodeInVM({\n            codeNode, // includes type/schemaName and data \n            dataNode: INPUT.data.dataForAction, // should be another Node that can be used by the action! \n            timeout: 5000\n          });\n        }catch(err){\n          return resolve('FAILED action');\n        }\n        \n        // validate actionResult!\n        // - todo\n        \n        return resolve(actionResult);\n        // { \n        //   txt: 'Response:', \n        //   nodeTypes: nodes.map(n=>n.type),\n        //   actionResult\n        // }); // + result);\n        \n      } else {\n        // no Node found for handling action :( \n          \n        return resolve({ \n          error: 'No Nodes for action in run_action (1):',\n          action: INPUT.data.matchActionType\n        }); // + result);\n      }\n      \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n  })\n\n  \n})()"
  }
}