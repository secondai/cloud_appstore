{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // Being passed in the publicKey we want to initiate a challenge with \n      // - also sending our \"connect_method\" info (if it exists) \n      \n      \n      // INPUT.type == \"challenge_init_remote:0.0.1:...\"\n      // INPUT.data == { \n      //   ExternalIdentityNode: { data: {publicKey:Strig}, nodes: [connect_method] }\n      // }\n      \n      // Save ExternalIdentityNode locally! \n      // - required before Identifying \n      // - saveExternal *should* handle duplicates (and updating the initial AuthPassphrase) \n      let ExternalIdentityNode = await universe.loadAndRunCapability('Identity',{},{\n        type: 'standard_capability_action:0.0.1:local:298j291bs',\n        data: {\n          action: 'saveExternal',\n          options: {\n            ExternalIdentityNode: INPUT.data.ExternalIdentityNode // should contain a connection method! \n          }\n        }\n      });\n      \n      console.log('Saved new/updated ExternalIdentityNode', ExternalIdentityNode);\n      \n      \n      // Authenticate with External Second \n      // - make authenticated requests to a Second (necessary for Learning?) \n      //   - should have ALL requests authenticated \n      // universe.setupExternalSecond();\n      let authExternalIdentityNode = await universe.loadAndRunCapability('IdentifyInitiate',{},{\n        type: 'standard_capability_action:0.0.1:local:298j291bs',\n        data: {\n          action: 'start',\n          options: {\n            externalIdentityPublicKey: ExternalIdentityNode.data.publicKey,\n            // authToken: 'eeaac41bdb1b717d137a53779db97457:07e0fbe19e72c3ff7e329fc293bcf5b51d780c4c3c60f80403b2fea8f30d0daa5e4891dbdd6c57d9844622078a681853f31202d0632f0ee95031c9369a60708ddb6220e248e3c2ec6b3bb3c00eb2425aea922351d7128ef333ea5fe6a8ad139c1978759e29b057db1e655f2fe7c8962e'\n          }\n        }\n      });\n      \n      return resolve({\n        type: 'boolean_with_node:s23jfo2j3l',\n        data: {\n          result: true,\n          node: ExternalIdentityNode\n        },\n        ExternalIdentityNode,\n        authExternalIdentityNode\n      })\n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()",
    "key": "42b3702f-e4b8-4f0b-89c5-26d1477054ff",
    "note": "action: Identify Challenge Initiate"
  }
}