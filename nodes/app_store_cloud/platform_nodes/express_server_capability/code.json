{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "persistent": true,
    "author": "-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCcuXovU+RZy85KMqLakYSH1mdV\nWdpEUtgcXUyGyU5hVeTO7BkV/kxeC2upcxOwNnrBOdsvHI3nrrILgt90/hCSHKzx\nhOFLREorGoKtSEHxI7/SnzzlWtV3gT/IP5GVHIyvuJBx3hCti0dH55DZG8iMGZ2y\ncGpV73Dez3hHmeBh6wIDAQAB\n-----END PUBLIC KEY-----",
    "version": "1",
    "note": "Capability: UserCommand",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // Expecting INPUT = capability_input_node:0.0.1:local:29f8239a13h9\n      // - capabilityNode: Object,\n      // - externalInputNode: Object,\n      \n      // Load the \"UserCommand\" capability\n      \n      let cmdInputNode = INPUT.data.externalInputNode;\n      \n      if(cmdInputNode.type != 'standard_capability_action:0.0.1:local:298j291bs'){\n        console.log('Unexpected input schema');\n        return reject();\n      }\n      \n      let inputAction = cmdInputNode.data.action;\n      let inputOpts = cmdInputNode.data.options;\n      \n      \n      switch(inputAction){\n        case 'setup':\n          \n          console.log('Setting up Express Server (in vm)');\n          \n          let express = universe.require('express');\n          let path = universe.require('path');\n          let logger = universe.require('morgan');\n          let bodyParser = universe.require('body-parser');\n          \n          var helmet = universe.require('helmet')\n          var cors = universe.require('cors');\n          var cookieParser = universe.require('cookie-parser')\n          var compression = universe.require('compression')\n          \n          const app = express();\n          universe.sharedServices.expressApp = app;\n          // global.console = utilLogger;\n          // utilLogger.debug(\"Overriding 'Express' logger\");\n          // app.use(utilLogger.middleware);\n          app.use(universe.require('morgan')('combined', { \"stream\": universe.sharedServices.loggerStream }));\n          \n          app.use(cors({\n          \torigin: '*',\n          \tcredentials: true\n          }));\n          app.use(cookieParser())\n          \n          // app.use(helmet({\n          // }))\n          \n          app.use(compression())\n          \n          // // View engine setup\n          // // - no views \n          // app.set('views', path.join(__dirname, '../views'));\n          // app.set('view engine', 'pug');\n          \n          app.disable('x-powered-by');\n          \n          // app.use(logger('dev', {\n          //   skip: () => app.get('env') === 'test'\n          // }));\n          app.use(bodyParser({limit: '10mb'}));\n          app.use(bodyParser.json());\n          app.use(bodyParser.urlencoded({ extended: false }));\n          \n          // TODO: handle static files (necessary?) \n          // app.use(express.static(path.join(__dirname, '../public')));\n          \n          // Session (redis)\n          let sessionStore;\n          const session = universe.require('express-session');\n          if(universe.sharedServices.redisClient){\n            const RedisStore = universe.require('connect-redis')(session);\n            const redisOptions = {\n            \tclient: universe.sharedServices.redisClient,\n            }\n            sessionStore = new RedisStore(redisOptions);\n          }\n          app.use(session({\n            store: sessionStore,\n            secret: 'sdjkfhsdjkhf92312',\n            resave: false,\n            saveUninitialized: true,\n            cookie: {\n            \tdomain: false, //'acme.etteserver.test',\n            \tsameSite: false\n            }\n          }));\n          \n          \n          // Routes\n          app.use(bodyParser.json(), async (req, res)=>{\n          \t\n          \t// wait for the result from the AI request \n          \t// - passing in the \"request arrived like X\" information that will give us a valid response to return \n          \t// - response might be a res.send({...everything..}) or simply res.send({resultId:'123'}) w/ a follow-up later \n          \t\n      \t\t\tlet response = await universe.runRequest({\n      \t\t\t\ttype: 'express_obj:Qmdsfkljsl',\n      \t\t\t\tdata: {\n      \t\t\t\t\treq // convert using circular-json when stringifying \n      \t\t\t\t}\n      \t\t\t}, false, req, res);\n          \n            console.log('http response from inside vm');\n            \n          });\n\n          \n          // Catch 404 and forward to error handler\n          app.use((req, res, next) => {\n            const err = new Error('Not Found');\n            err.status = 404;\n            next(err);\n          });\n          \n          // Error handler\n          app.use((err, req, res, next) => { // eslint-disable-line no-unused-vars\n            res\n              .status(err.status || 500)\n              .render('error', {\n                message: err.message\n              });\n          });\n          \n          console.log('Express App Server warming up...');\n          \n          const http = universe.require('http');\n          const server = http.createServer(app);\n          \n          let { PORT = 8080 } = universe.env;\n          \n          server.listen(PORT, () => {\n            console.info('Second AI Express Server is now running (from inside vm)');\n          });\n          \n          universe.sharedServices.httpServer = server;\n          \n          return resolve({\n            type: 'boolean:Qmsdflkj',\n            data: true\n          });\n\n          break;\n          \n        default:\n          console.error('Only \"setup\" enabled for ExpressServer');\n          return reject({});\n      }\n        \n    }catch(err){\n      console.error('err setting up express server:', err);\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()",
    "key": "508e6e42-51ec-44d6-aa9b-10a912da2ed8"
  }
}