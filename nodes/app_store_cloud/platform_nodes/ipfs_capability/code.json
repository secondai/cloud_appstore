{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "5f2da6d7-3b30-442d-b699-25f9a8b48ea7",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // Expecting INPUT = standard_capability_action:0.0.1:local:298j291bs\n      \n      let cmdInputNode = INPUT.data.externalInputNode;\n      \n      if(cmdInputNode.type != 'standard_capability_action:0.0.1:local:298j291bs'){\n        console.log('Unexpected input schema');\n        return reject();\n      }\n      \n      let inputAction = cmdInputNode.data.action;\n      let inputOpts = cmdInputNode.data.options;\n      \n      // actions \n      // - sync: checks IPFS-host for pinned files, adds new ones (doesnt currently remove?) \n  \n      var ipfs = universe.sharedServices.ipfsApi;\n      \n      // start processing input\n      switch(inputAction){\n        case 'setup':\n          // setus up IPFS services on universe.sharedServices \n          var ipfsPort = universe.env.IPFS_PORT || 5010,\n            ipfsProtocol = universe.env.IPFS_PROTOCOL || 'http',\n            ipfsHost = universe.env.IPFS_HOST || universe.env.DOCKHERO_HOST;\n          try {\n            console.log('IPFS Connection Params:', ipfsProtocol, ipfsHost, ipfsPort)\n            var ipfsAPI = universe.require('ipfs-api');\n            ipfs = ipfsAPI(ipfsHost, ipfsPort, {protocol: ipfsProtocol}) // leaving out the arguments will default to these values\n          }catch(err){\n            console.error('Failed ipfs-api (should restart!):', err);\n            // try and restart \n          }\n          universe.sharedServices.ipfsApi = ipfs;   \n          \n          return resolve({\n            type: 'boolean',\n            data: true\n          });\n          \n        case 'sync':\n          \n          // get all pins \n          console.log('Getting ID, Pinset');\n          // console.log('PINSET:', universe.IPFS.ipfs.id())\n          let ipfsid = await ipfs.id();\n          // console.log('====IPFSid:', ipfsid, typeof ipfsid);\n          var pinset = await ipfs.pin.ls();\n          // console.log('====PINSET:', JSON.stringify(pinset, null, 2));\n          // let addedFiles = await universe.IPFS.ipfs.files.add(new Buffer('testing message 123456789' + (Date.now()),'utf8'))\n          // let newHash = result[0].hash;\n          // let pinResult = await universe.IPFS.ipfs.pin.add(newHash)\n          \n          return resolve({\n            type: 'boolean:..',\n            data: true\n          })\n          \n          break;\n          \n        case 'pin.ls':\n          \n          // get all pins \n          console.log('Getting IPFS Pinset');\n          var pinset = await ipfs.pin.ls();\n          return resolve({\n            type: 'list_of_pins:..',\n            data: pinset\n          })\n          \n          break;\n          \n          \n        case 'file.add':\n          // Add a file (will likely also pin) \n          \n          // expecting utf8 input? \n          let bufferData = new Buffer(inputOpts.data.fileValue, 'utf8'); // expecting type:file_as_string\n          \n          let addResult;\n          try {\n            addResult = await ipfs.files.add(bufferData)\n          }catch(err){\n            console.error('Failed adding to IPFS:', err);\n            return resolve({\n              type: 'boolean:..',\n              data: false\n            });\n          }\n          \n          console.log('Added to IPFS!');\n          \n          let newHash = addResult[0].hash;\n          \n          // also pin?\n          var pinResult;\n          try {\n            if(inputOpts.data.options && inputOpts.data.options.pin){\n              pinResult = await ipfs.pin.add(newHash);\n            }\n          }catch(err){\n            console.error('inputOpts.data.options.pin eRoRoR:', err);\n          }\n            \n          return resolve({\n            type: 'added_file:..',\n            data: {\n              hash: newHash,\n              pinResult\n            }\n          })\n          \n          break;\n          \n        case 'pin.add':\n          // Pin an already-added file \n          var pinResult;\n          try {\n            pinResult = await ipfs.pin.add(INPUT.data.hash)\n          }catch(err){\n            console.error('Failed ipfs pin:', err);\n            return resolve({\n              type: 'boolean:..',\n              data: false\n            });\n          }\n          \n          return resolve({\n            type: 'pin_result:..',\n            data: pinResult\n          })\n          \n          break;\n          \n        case 'pin.rm':\n          // Remove a pin for a file \n          \n          // get all pins \n          console.log('Getting ID, Pinset');\n          // console.log('PINSET:', universe.IPFS.ipfs.id())\n          let removedPin = await ipfs.pin.rm(INPUT.data.hash);\n          \n          return resolve({\n            type: 'pin_result:..',\n            data: removedPin\n          })\n          \n          break;\n          \n        default:\n          console.error('Missing inputAction for capability');\n          return resolve({\n            type: 'error:Qmdsfljk',\n            data: {\n              error: true,\n              message: 'Missing inputAction for capability'\n            }\n          });\n          break;\n      }\n      \n        \n    }catch(err){\n      console.error('IPFS error:', err);\n      resolve({ERROR: true, err: err});\n    }\n    \n    \n  })\n})()"
  }
}