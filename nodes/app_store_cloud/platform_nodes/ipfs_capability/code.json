{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "5f2da6d7-3b30-442d-b699-25f9a8b48ea7",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // Expecting INPUT = standard_capability_action:0.0.1:local:298j291bs\n      \n      let cmdInputNode = INPUT.data.externalInputNode;\n      \n      if(cmdInputNode.type != 'standard_capability_action:0.0.1:local:298j291bs'){\n        console.log('Unexpected input schema');\n        return reject();\n      }\n      \n      let inputAction = cmdInputNode.data.action;\n      let inputOpts = cmdInputNode.data.options;\n      \n      // actions \n      // - sync: checks IPFS-host for pinned files, adds new ones (doesnt currently remove?) \n      \n      // start processing input\n      switch(inputAction){\n        case 'sync':\n          \n          // get all pins \n          console.log('Getting ID, Pinset');\n          // console.log('PINSET:', universe.IPFS.ipfs.id())\n          let ipfsid = await universe.IPFS.ipfs.id();\n          console.log('====IPFSid:', ipfsid);\n          let pinset = await universe.IPFS.ipfs.pin.ls();\n          console.log('PINSET:', JSON.stringify(pinset, null, 2));\n          // let addedFiles = await universe.IPFS.ipfs.files.add(new Buffer('testing message 123456789' + (Date.now()),'utf8'))\n          // let newHash = result[0].hash;\n          // let pinResult = await universe.IPFS.ipfs.pin.add(newHash)\n          \n          return resolve({\n            type: 'boolean:..',\n            data: true\n          })\n          \n          break;\n          \n        default:\n          console.error('Missing inputAction for capability');\n          return resolve({\n            type: 'error:Qmdsfljk',\n            data: {\n              error: true,\n              message: 'Missing inputAction for capability'\n            }\n          });\n          break;\n      }\n      \n        \n    }catch(err){\n      console.error('IPFS error:', err);\n      resolve({ERROR: true, err: err});\n    }\n    \n    \n  })\n})()"
  }
}