{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "version": "1",
    "note": "search remote datasource",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // Run's run_action_sequence on a remote, using supplied information \n      // - shifts this Second's authorization for the remote to the front of the action list \n      \n      // INPUT.type = \"remote_run_action_sequence_authorized:Qm...\"\n      // INPUT.data = {\n      //   identity: String,\n      //   actions: [...]\n      // }\n      \n      let {\n        identity,\n        actions\n      } = INPUT.data;\n      \n      // Get local ExternalIdentity if it exists \n      // - should exist, unless we deleted it! \n      let nodes = await universe.searchMemory({\n        filter: {\n          sqlFilter: {\n            nodeId: null,\n            type: 'external_identity:0.0.1:local:8982f982j92',\n            data: {\n              identity\n            }\n          },\n          // function for returning data from the Node, after filtering a bit \n          // - includes both the Node, and Nodes with nodeId (pointers) \n          filterNodes: tmpNodes=>{\n            return tmpNodes;\n          }\n        }\n      });\n      \n      if(!nodes || !nodes.length){\n        \n        return resolve({\n          type: 'error:..',\n          data: {\n            msg: 'No ExternalIdentityNode when finding'\n          }\n        });\n        \n      }\n      \n      let ExternalIdentityNode = nodes[0];\n      let token = ExternalIdentityNode.data.token;\n      \n      // Get connect method\n      let url = ExternalIdentityNode.nodes.find(n=>{\n        return (n.type.split(':')[0] == 'external_identity_connect_method')\n      }).data.connection;\n      \n      // ExternalIdentityNode.data.test1 = 'test1';\n      // let updatedExternalIdentityNode = await universe.updateNode(ExternalIdentityNode);\n    \n      \n      // return resolve({\n      //   ExternalIdentityNode,\n      //   token\n      // })\n      // let token = await universe.capabilities().\n      // run_action_sequence:0.0.1:local:293fh8239hsdf23f\n      \n                \n      let data = {\n        type: 'run_action_sequence:0.0.1:local:293fh8239hsdf23f',\n        data: {\n          actions: [\n            \n            {\n              matchActionType: 'identify_via_token:0.0.1:local:237823783g2123',\n              dataForAction: {\n                type: 'string:...',\n                data: token\n              }\n            },\n            \n          ]\n        }\n      }\n      \n      // append input actions array \n      data.data.actions = data.data.actions.concat(actions);\n      \n      console.log('Running run_action_sequence on remote');\n      \n      let response;\n      try {\n        response = await universe.webrequest.post({\n          url,\n          body: data,\n          json: true\n        });\n      }catch(err){\n        return resolve({\n          error: true,\n          err,\n          errStr: err.toString()\n        });\n      }\n      \n      // expecting valid Second response\n      // - type should be \"remote second response\" ? \n      resolve(response.secondResponse);\n      \n    }catch(err){\n      reject(err);\n    }\n  })\n})()",
    "key": "142170be-9d26-4858-8ed6-dffa875fef96"
  }
}