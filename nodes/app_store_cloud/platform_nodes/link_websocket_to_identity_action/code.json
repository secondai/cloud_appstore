{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "269e93ea-02b6-4182-98a2-c1bb066c7ac1",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      console.log('---LINKING WEBSOCKET!---');\n      \n      // This is for when this Second is acting as the socketio Server, and a remote Second is a websocket client.\n      // - done when we can't reach the remote Second via http, and they need to come a callin'\n      // - This=>Cloud, Client=>RPi\n      \n      // Get the authenticated identity \n      \n      let requestCache = await universe.getRequestCache();\n      \n      let ExternalIdentityNode;\n      try {\n        ExternalIdentityNode = requestCache.keyvalue.IdentityNode;\n      }catch(err){\n        console.error('Missing ExternalIdentityNode (IdentityNode in requestcache)', err);\n      }\n      if(!ExternalIdentityNode){\n        // Forgot to identify_via_token beforehand \n        console.error('Missing IdentityNode for link_websocket_identity action');\n        throw \"Missing IdentityNode for link_websocket_identity action\";\n        return false;\n      }\n    \n      \n      // Assert that a websocket was used \n      let wsClientId = requestCache.keyvalue.wsClientId;\n      \n      \n      // Get all the nodes for the ExternalIdentityNode\n      let tmpExternal = await universe.searchMemory({\n        filter: {\n          sqlFilter: {\n            _id: ExternalIdentityNode._id\n          }\n        }\n      });\n      \n      ExternalIdentityNode = tmpExternal[0];\n      \n      \n      // Update the external_identity's \"local_websocket_connection:Qmf3289\" w/ data: { clientId, status }\n      // - TODO: enabled/disabled on connect/disconnect! \n      let wsNode = ExternalIdentityNode.nodes.find(n=>{\n        return n.type.split(':')[0] == 'local_websocket_connection'\n      });\n      if(!wsNode){\n        // create \n        console.log('Creating wsNode');\n        wsNode = await universe.newNode({\n          nodeId: ExternalIdentityNode._id,\n          name: universe.uuidv4(),\n          type: 'local_websocket_connection:Qmf3289',\n          data: {\n            isClient: true, // external identity is the client \n            clientId: wsClientId,\n            status: 'connected' // TODO: update elsewhere?\n          }\n        });\n      } else {\n        // update \n        console.log('Updating wsNode');\n        wsNode.data.isClient = true;\n        wsNode.data.clientId = wsClientId;\n        wsNode.data.status = 'connected'; // TODO: update elsewhere?\n        wsNode = await universe.updateNode(wsNode);\n      }\n      \n      return resolve({\n        type: 'boolean:Qmdskfj20fi',\n        data: true\n        // { //true\n        //   // ExternalIdentityNode,\n        //   wsClientId,\n        //   // wsNode\n        //   status: wsNode.data.status; // state\n        // }\n      });\n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}