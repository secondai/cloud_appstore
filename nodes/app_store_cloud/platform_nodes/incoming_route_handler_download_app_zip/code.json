{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "8a1aec75-e403-4e69-84ad-da2fa3652758",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // INPUT: expressObj\n      \n      let headers = INPUT.data.req.headers;\n      let body = INPUT.data.req.body;\n      let query = INPUT.data.req.query;\n\n      console.log('--incoming_route_handler: Download App Zip--');\n      \n      // Get appId to download \n      let appId = query.appId;\n      if(!appId){\n        await universe.httpResponse('send', 'Missing appId');\n        return resolve(true);\n      }\n      \n      console.log('appId:', appId);\n      \n      // Get app nodes \n      let cacheAppId = universe.getParentRoot(SELF)._id;\n      let cache = ['download_app_zip', cacheAppId, appId].join('|');\n      // app root-level (old: global-root) \n      let nodes = await universe.searchMemory({\n        cache,\n        filter: {\n          sqlFilter: {\n            nodeId: null,\n            type: 'app_base:Qmtesting',\n            data: {\n              appId\n            }\n          },\n        }\n      });\n      if(!nodes.length){\n        console.error('unable to find appId:', appId);\n        await universe.httpResponse('send', 'Unable to find appId');\n        return resolve(true);\n      }\n      \n      function removeExtra(nodes){\n        nodes.forEach(node=>{\n          delete node._id;\n          delete node.nodeId;\n          delete node.parent;\n          delete node.active;\n          delete node.updatedAt;\n          delete node.createdAt;\n          \n          removeExtra(node.nodes || []);\n        });\n      }\n      \n      removeExtra(nodes);\n      \n      let appBase = nodes[0];\n      \n      \n      \n      // Convert to zip \n      // - TODO: cache until updated \n      \n\n      await universe.httpResponse('send', appBase);\n      \n      return resolve(true);\n        \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}