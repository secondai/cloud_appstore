{
  "type": "code:0.0.1:local:32498h32f2",
  "name": "code",
  "data": {
    "key": "267e87c1-8497-4eeb-8af6-4e50e0098a6f",
    "code": "(()=>{\n  return new Promise(async (resolve, reject)=>{\n    try {\n      \n      // // INPUT = generic options node \n      // console.log('REBUILD_MEMORY_ACTION');\n      // let continueAction = await universe.loadAndRunCapability('Auth',{},{\n      //   type: 'standard_capability_action:0.0.1:local:298j291bs',\n      //   data: {\n      //     action: 'actionPermissions',\n      //     options: {\n      //       groups: {\n      //         admin: true\n      //       }\n      //     }\n      //   }\n      // });\n      // if(!continueAction.data){\n      //   // not allowed to continue \n      //   console.error('Failed Auth');\n      //   return resolve({\n      //     type: 'failed_auth:...',\n      //     data: {\n      //       error: true\n      //     }\n      //   })\n      // }\n      \n      \n      let { \n        skipWaitForResolution\n      } = INPUT.data;\n      \n      let saved;\n      try {\n        await universe.rebuildMemory(skipWaitForResolution);\n      }catch(err){\n        return resolve({\n          type: 'error_failed_rebuilding:...',\n          data: {\n            error: true,\n            err: err.toString()\n          }\n        })\n      }\n      \n      return resolve({\n        type: 'boolean:...',\n        data: true\n      });\n      \n        \n    }catch(err){\n      resolve({ERROR: true, err: err.toString()});\n    }\n    \n    \n  })\n})()"
  }
}